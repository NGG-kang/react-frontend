UI데이터가 변경되면 해당 컴포넌트의 render()함수가 호출되어
화면을 자동으로 갱신

클래스형 컴포넌트에는 render
함수형 컴포넌트 에서는 그 함수를 매번 호출
컴포넌트에서 유지해야 할 값들은 Hook 활용

props(속성값)

jsx문법
javascript의 문법 확장
어떤 브라우저도 지원 안함
babel을 통한 transpile 필요


상태값 state
UI로의 반영을 위해 유재해야할 값들의 묶음
컴포넌트에서의 상태값에 대한 getter/setter함수를 제공해줌
상태값, 속성값은 불변값으로 처리 해야함

상태값 유지
1. 컴포넌트 내부
getter setter 활용
컴포넌트 계층이 복잡할 때, 상태값 속성값 전파의 어려움
리액트 16.3부터 Context API로 전파가 쉬워졌다
context consumer api로 자식(하위) 컴포넌트가 상태값 접근 가능
값을 공유하는 것만 도와줌

2. 컴포넌트 외부에서 전역 상태 관리
컴포넌트 외부에 별도의 상태값 저장소를 둠
여러 컴포넌트들에 의해 공유될 상태값들을 관리(로그인정보 등)
컴포넌트에게 상태값 setter 함수를 제공하기보다 dispatch함수를 제공한다
// 전역 상태관리에 쓰이는게 Redux라고 있다

state reducer 패턴
상태값을 누적/적용해서 현재의 상태값을 이뤄낸다는 의미

numbers = [1,2,3,4,5]
numbers. reduce((acc, n) => acc + n, 0)

상태값 저장소: store

setState // setter
this.state // getter
비동기로 동작
함수로 지정하면 직전 상태값을 받아, 활용할수있다
상태값을 직접 참조하지 않아도 직전 상태값을 인자로 전달받기에 유용하다

setState를 통하지 않고 state를 조작하면 UI에 나타나지않음

클래스형 컴포넌트 생성자에서는 setState 호출은 무시
setState 호출은 컴포넌트가 마운트된 이후에만 유효
데이터를 가져오기 위해 API를 호출하고 그 응답을 state에 반영코자 할 경우에
componentDIdMout 메서드
함수형 컴포넌트에서는 useEffect(()=>{})


리액트 개발의 핵심
어떻게 하면 상태값을 효율적으로 잘 관리할 수 있을까
상태값에 따라 화면이 불필요하게 업데이트되지 않도록 하자


///////////////////
// 속성값
컴포넌트 생성 시에 넘겨지는 값의 목록
읽거 전용으로 취급, 변경하지 않음
자식 컴포넌트에선 "데이터", "함수"를 전달받는 통로
Context API로도 받을 수 있다

컴포넌트는 HOC(High Order Component)기법을 통해
Redux의 값이나 함수를 넘겨 받기도 한다
부모에서 주는게 아닌
자식 컴포넌트를 감싸 store로 부터 값을 가져와서 속성값을 준다
값 지정시 중괄호를 통해 다양한 타입의 값 및 표현식 지정 가능


// TODO: 고차 컴포넌트란?
// 아마 상위 컴포넌트가 감싸서 무언가를 넘겨주거나 지정하는 역할인듯


이벤트
속성명은 camelCase
HTML에서는 onclick react는 onClick
DOM 요소에만 이벤트가 지원됨


function에서는 this가 function 내부의 값 지정인데
화살표 함수는 전체의 this이므로 겉으 값을 this로 쓸 수가 있다

그래서 function에서는 bind라는 것으로  this를 지정해야 한다


css-module
import TestStyle from './test.module.css'
<div className={TestStyle.wrapper}
같은 이름의 css가 있어도
각 클래스명에 고유한 해시값이 적용되어 클래스명 중복을 방지해준다

Sass활용
yarn add --dev node-Sass활용
import TestStyle from '/.test.module.scss'
나머지는 동일
sass와 scss방식이 있는데
sass는 파이썬과 같이 콜론 (:)만 주고 css 작성
scss는 기존 css처럼 중괄호 {}로 css 작성


리엑트는 불변성을 유지하면서 상태값을 업데이트 해야만한다
리스트 불변성 유지할때 immer를 사용한다
